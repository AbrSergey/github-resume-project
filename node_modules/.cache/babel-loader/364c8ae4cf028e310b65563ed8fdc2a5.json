{"ast":null,"code":"import { getAccessToken } from '../services/backend';\nexport default {\n  state: {\n    token: null,\n    loading: true,\n    error: null\n  },\n  reducers: {\n    fetching: (state, payload) => ({\n      token: null,\n      loading: true,\n      error: null\n    }),\n    succeed: (state, payload) => ({ ...state,\n      token: payload.code,\n      loading: false\n    }),\n    failed: (state, error) => ({ ...state,\n      loading: false,\n      error\n    })\n  },\n  effects: {\n    async tokenGet(payload, rootState) {\n      try {\n        this.fetching();\n        const {\n          data\n        } = await getAccessToken(payload);\n        this.succeed(data);\n      } catch (err) {\n        this.failed(err);\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["/home/sergey/Documents/own_project/MVP/mvp-crash-course/src/models/authorize.js"],"names":["getAccessToken","state","token","loading","error","reducers","fetching","payload","succeed","code","failed","effects","tokenGet","rootState","data","err"],"mappings":"AAAA,SAASA,cAAT,QAA+B,qBAA/B;AAEA,eAAe;AACbC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE,IADF;AAELC,IAAAA,OAAO,EAAE,IAFJ;AAGLC,IAAAA,KAAK,EAAE;AAHF,GADM;AAObC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE,CAACL,KAAD,EAAQM,OAAR,MAAqB;AAC7BL,MAAAA,KAAK,EAAE,IADsB;AAE7BC,MAAAA,OAAO,EAAE,IAFoB;AAG7BC,MAAAA,KAAK,EAAE;AAHsB,KAArB,CADF;AAMRI,IAAAA,OAAO,EAAE,CAACP,KAAD,EAAQM,OAAR,MAAqB,EAC5B,GAAGN,KADyB;AAE5BC,MAAAA,KAAK,EAAEK,OAAO,CAACE,IAFa;AAG5BN,MAAAA,OAAO,EAAE;AAHmB,KAArB,CAND;AAWRO,IAAAA,MAAM,EAAE,CAACT,KAAD,EAAQG,KAAR,MAAmB,EACzB,GAAGH,KADsB;AAEzBE,MAAAA,OAAO,EAAE,KAFgB;AAGzBC,MAAAA;AAHyB,KAAnB;AAXA,GAPG;AAyBbO,EAAAA,OAAO,EAAE;AACP,UAAMC,QAAN,CAAeL,OAAf,EAAwBM,SAAxB,EAAmC;AACjC,UAAI;AACF,aAAKP,QAAL;AACA,cAAM;AAAEQ,UAAAA;AAAF,YAAW,MAAMd,cAAc,CAACO,OAAD,CAArC;AACA,aAAKC,OAAL,CAAaM,IAAb;AACD,OAJD,CAIE,OAAMC,GAAN,EAAW;AACX,aAAKL,MAAL,CAAYK,GAAZ;AACD;AACF;;AATM;AAzBI,CAAf","sourcesContent":["import { getAccessToken } from '../services/backend';\n\nexport default {\n  state: {\n    token: null,\n    loading: true,\n    error: null\n  },\n\n  reducers: {\n    fetching: (state, payload) => ({\n      token: null,\n      loading: true,\n      error: null \n    }),\n    succeed: (state, payload) => ({\n      ...state,\n      token: payload.code,\n      loading: false\n    }), \n    failed: (state, error) => ({\n      ...state,\n      loading: false,\n      error\n    }) \n  },\n\n  effects: {\n    async tokenGet(payload, rootState) {\n      try {\n        this.fetching();\n        const { data } = await getAccessToken(payload);\n        this.succeed(data);\n      } catch(err) {\n        this.failed(err);\n      }\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}