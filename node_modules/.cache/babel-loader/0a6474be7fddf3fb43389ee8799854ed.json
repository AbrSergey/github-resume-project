{"ast":null,"code":"import { userInfo } from '../services/backend';\nexport const generalInformationGetAction = () => async dispatch => {\n  dispatch({\n    type: types.GENERALINFORMATION_GET\n  });\n\n  try {\n    const {\n      data\n    } = await userInfo();\n    return dispatch({\n      type: types.GENERALINFORMATION_GET_SUCCEED,\n      informationData: {\n        company: data.company,\n        blog: data.blog,\n        location: data.location,\n        email: data.email,\n        bio: data.bio\n      },\n      name: data.name,\n      position: data.company,\n      avatar: data.avatar_url\n    });\n  } catch (err) {\n    return dispatch({\n      type: types.GENERALINFORMATION_GET_FAILED\n    });\n  }\n};\nexport default {\n  state: {\n    informationData: {},\n    name: null,\n    position: null,\n    avatar: null,\n    loading: true,\n    error: null\n  },\n  reducers: {\n    fetching: (state, payload) => ({\n      informationData: {},\n      name: null,\n      position: null,\n      avatar: null,\n      loading: true,\n      error: null\n    }),\n    succeed: (state, payload) => ({ ...state,\n      informationData: {\n        company: payload.company,\n        blog: payload.blog,\n        location: payload.location,\n        email: payload.email,\n        bio: payload.bio\n      },\n      name: payload.name,\n      position: payload.company,\n      avatar: payload.avatar_url,\n      loading: false\n    }),\n    failed: (state, error) => ({ ...state,\n      loading: false,\n      error\n    })\n  },\n  effects: {\n    async tokenGet(payload, rootState) {\n      try {\n        this.fetching();\n        const {\n          data\n        } = await userInfo(payload);\n        this.succeed(data);\n      } catch (err) {\n        this.failed(err);\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["/home/sergey/Documents/own_project/MVP/mvp-crash-course/src/models/generalInformation.js"],"names":["userInfo","generalInformationGetAction","dispatch","type","types","GENERALINFORMATION_GET","data","GENERALINFORMATION_GET_SUCCEED","informationData","company","blog","location","email","bio","name","position","avatar","avatar_url","err","GENERALINFORMATION_GET_FAILED","state","loading","error","reducers","fetching","payload","succeed","failed","effects","tokenGet","rootState"],"mappings":"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","sourcesContent":["import { userInfo } from '../services/backend';\n\nexport const generalInformationGetAction = () => async (dispatch) => {\n  dispatch({\n    type: types.GENERALINFORMATION_GET\n  });\n\n  try {\n    const { data } = await userInfo();\n\n    return dispatch({\n      type: types.GENERALINFORMATION_GET_SUCCEED,\n      informationData: {\n        company: data.company,\n        blog: data.blog,\n        location: data.location,\n        email: data.email,\n        bio: data.bio\n      },\n      name: data.name,\n      position: data.company,\n      avatar: data.avatar_url\n    });\n  } catch(err) {\n    return dispatch({\n      type: types.GENERALINFORMATION_GET_FAILED\n    });\n  }\n};\n\nexport default {\n  state: {\n    informationData: {},\n    name: null,\n    position: null,\n    avatar: null,\n    loading: true,\n    error: null\n  },\n\n  reducers: {\n    fetching: (state, payload) => ({\n      informationData: {},\n      name: null,\n      position: null,\n      avatar: null,\n      loading: true,\n      error: null\n    }),\n    succeed: (state, payload) => ({\n      ...state,\n      informationData: {\n        company: payload.company,\n        blog: payload.blog,\n        location: payload.location,\n        email: payload.email,\n        bio: payload.bio\n      },\n      name: payload.name,\n      position: payload.company,\n      avatar: payload.avatar_url,\n      loading: false\n    }), \n    failed: (state, error) => ({\n      ...state,\n      loading: false,\n      error\n    }) \n  },\n\n  effects: {\n    async tokenGet(payload, rootState) {\n      try {\n        this.fetching();\n        const { data } = await userInfo(payload);\n        this.succeed(data);\n      } catch(err) {\n        this.failed(err);\n      }\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}