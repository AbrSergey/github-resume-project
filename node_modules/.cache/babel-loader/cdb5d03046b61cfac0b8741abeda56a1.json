{"ast":null,"code":"import { userInfo } from '../services/backend';\nexport default {\n  state: {\n    informationData: {},\n    socialLinkData: [],\n    name: null,\n    company: null,\n    position: null,\n    avatar: null,\n    loading: true,\n    error: null\n  },\n  reducers: {\n    fetching: (state, payload) => ({\n      informationData: {},\n      socialLinkData: [],\n      name: null,\n      company: null,\n      position: null,\n      avatar: null,\n      loading: true,\n      error: null\n    }),\n    succeed: (state, payload) => ({ ...state,\n      informationData: {\n        company: payload.company,\n        blog: payload.blog,\n        location: payload.location,\n        email: payload.email,\n        bio: payload.bio\n      },\n      socialLinkData: [{\n        href: payload.html_url,\n        iconClass: 'fa-github'\n      }, {\n        href: payload.twitter_username ? `https://twitter.com/${payload.twitter_username}` : null,\n        iconClass: 'fa-twitter'\n      }],\n      name: payload.name,\n      company: payload.company,\n      position: payload.company,\n      avatar: payload.avatar_url,\n      loading: false\n    }),\n    failed: (state, error) => ({ ...state,\n      loading: false,\n      error: JSON.stringify(error)\n    })\n  },\n  effects: {\n    async get(payload, rootState) {\n      try {\n        this.fetching();\n        const {\n          data\n        } = await userInfo();\n        this.succeed(data);\n      } catch (err) {\n        this.failed(err);\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["/home/sergey/Documents/own_project/MVP/mvp-crash-course/src/models/generalInformation.js"],"names":["userInfo","state","informationData","socialLinkData","name","company","position","avatar","loading","error","reducers","fetching","payload","succeed","blog","location","email","bio","href","html_url","iconClass","twitter_username","avatar_url","failed","JSON","stringify","effects","get","rootState","data","err"],"mappings":"AAAA,SAASA,QAAT,QAAyB,qBAAzB;AAEA,eAAe;AACbC,EAAAA,KAAK,EAAE;AACLC,IAAAA,eAAe,EAAE,EADZ;AAELC,IAAAA,cAAc,EAAE,EAFX;AAGLC,IAAAA,IAAI,EAAE,IAHD;AAILC,IAAAA,OAAO,EAAE,IAJJ;AAKLC,IAAAA,QAAQ,EAAE,IALL;AAMLC,IAAAA,MAAM,EAAE,IANH;AAOLC,IAAAA,OAAO,EAAE,IAPJ;AAQLC,IAAAA,KAAK,EAAE;AARF,GADM;AAYbC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE,CAACV,KAAD,EAAQW,OAAR,MAAqB;AAC7BV,MAAAA,eAAe,EAAE,EADY;AAE7BC,MAAAA,cAAc,EAAE,EAFa;AAG7BC,MAAAA,IAAI,EAAE,IAHuB;AAI7BC,MAAAA,OAAO,EAAE,IAJoB;AAK7BC,MAAAA,QAAQ,EAAE,IALmB;AAM7BC,MAAAA,MAAM,EAAE,IANqB;AAO7BC,MAAAA,OAAO,EAAE,IAPoB;AAQ7BC,MAAAA,KAAK,EAAE;AARsB,KAArB,CADF;AAWRI,IAAAA,OAAO,EAAE,CAACZ,KAAD,EAAQW,OAAR,MAAqB,EAC5B,GAAGX,KADyB;AAE5BC,MAAAA,eAAe,EAAE;AACfG,QAAAA,OAAO,EAAEO,OAAO,CAACP,OADF;AAEfS,QAAAA,IAAI,EAAEF,OAAO,CAACE,IAFC;AAGfC,QAAAA,QAAQ,EAAEH,OAAO,CAACG,QAHH;AAIfC,QAAAA,KAAK,EAAEJ,OAAO,CAACI,KAJA;AAKfC,QAAAA,GAAG,EAAEL,OAAO,CAACK;AALE,OAFW;AAS5Bd,MAAAA,cAAc,EAAE,CACd;AACEe,QAAAA,IAAI,EAAEN,OAAO,CAACO,QADhB;AAEEC,QAAAA,SAAS,EAAE;AAFb,OADc,EAKd;AACEF,QAAAA,IAAI,EAAEN,OAAO,CAACS,gBAAR,GAA4B,uBAAsBT,OAAO,CAACS,gBAAiB,EAA3E,GAA+E,IADvF;AAEED,QAAAA,SAAS,EAAE;AAFb,OALc,CATY;AAmB5BhB,MAAAA,IAAI,EAAEQ,OAAO,CAACR,IAnBc;AAoB5BC,MAAAA,OAAO,EAAEO,OAAO,CAACP,OApBW;AAqB5BC,MAAAA,QAAQ,EAAEM,OAAO,CAACP,OArBU;AAsB5BE,MAAAA,MAAM,EAAEK,OAAO,CAACU,UAtBY;AAuB5Bd,MAAAA,OAAO,EAAE;AAvBmB,KAArB,CAXD;AAoCRe,IAAAA,MAAM,EAAE,CAACtB,KAAD,EAAQQ,KAAR,MAAmB,EACzB,GAAGR,KADsB;AAEzBO,MAAAA,OAAO,EAAE,KAFgB;AAGzBC,MAAAA,KAAK,EAAEe,IAAI,CAACC,SAAL,CAAehB,KAAf;AAHkB,KAAnB;AApCA,GAZG;AAuDbiB,EAAAA,OAAO,EAAE;AACP,UAAMC,GAAN,CAAUf,OAAV,EAAmBgB,SAAnB,EAA8B;AAC5B,UAAI;AACF,aAAKjB,QAAL;AACA,cAAM;AAAEkB,UAAAA;AAAF,YAAW,MAAM7B,QAAQ,EAA/B;AACA,aAAKa,OAAL,CAAagB,IAAb;AACD,OAJD,CAIE,OAAMC,GAAN,EAAW;AACX,aAAKP,MAAL,CAAYO,GAAZ;AACD;AACF;;AATM;AAvDI,CAAf","sourcesContent":["import { userInfo } from '../services/backend';\n\nexport default {\n  state: {\n    informationData: {},\n    socialLinkData: [],\n    name: null,\n    company: null,\n    position: null,\n    avatar: null,\n    loading: true,\n    error: null\n  },\n\n  reducers: {\n    fetching: (state, payload) => ({\n      informationData: {},\n      socialLinkData: [],\n      name: null,\n      company: null,\n      position: null,\n      avatar: null,\n      loading: true,\n      error: null\n    }),\n    succeed: (state, payload) => ({\n      ...state,\n      informationData: {\n        company: payload.company,\n        blog: payload.blog,\n        location: payload.location,\n        email: payload.email,\n        bio: payload.bio\n      },\n      socialLinkData: [\n        {\n          href: payload.html_url,\n          iconClass: 'fa-github'\n        },\n        {\n          href: payload.twitter_username ? `https://twitter.com/${payload.twitter_username}` : null,\n          iconClass: 'fa-twitter'\n        }\n      ],\n      name: payload.name,\n      company: payload.company,\n      position: payload.company,\n      avatar: payload.avatar_url,\n      loading: false\n    }), \n    failed: (state, error) => ({\n      ...state,\n      loading: false,\n      error: JSON.stringify(error)\n    }) \n  },\n\n  effects: {\n    async get(payload, rootState) {\n      try {\n        this.fetching();\n        const { data } = await userInfo();\n        this.succeed(data);\n      } catch(err) {\n        this.failed(err);\n      }\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}