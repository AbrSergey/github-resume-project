{"ast":null,"code":"import { useEffect, useState } from 'react';\nexport const useDarkMode = () => {\n  const [darkTheme, changeTheme] = useState(false); // const [ componentMounted, setComponentMounted ] = useState(false);\n\n  const toggleTheme = () => {\n    if (!darkTheme) {\n      window.localStorage.setItem('theme', 'dark');\n      changeTheme(true);\n    } else {\n      window.localStorage.setItem('theme', 'light');\n      changeTheme(false);\n    }\n  };\n\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem('theme') === 'dark';\n\n    if (localTheme) {\n      changeTheme(localTheme);\n    } else {\n      changeTheme('light');\n      window.localStorage.setItem('theme', 'light');\n    }\n\n    setComponentMounted(true);\n  }, []);\n  return [darkTheme, toggleTheme, componentMounted];\n};","map":{"version":3,"sources":["/home/sergey/Documents/own_project/MVP/mvp-crash-course/src/components/useDarkMode/index.js"],"names":["useEffect","useState","useDarkMode","darkTheme","changeTheme","toggleTheme","window","localStorage","setItem","localTheme","getItem","setComponentMounted","componentMounted"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC/B,QAAM,CAAEC,SAAF,EAAaC,WAAb,IAA6BH,QAAQ,CAAC,KAAD,CAA3C,CAD+B,CAE/B;;AAEA,QAAMI,WAAW,GAAG,MAAM;AACxB,QAAI,CAACF,SAAL,EAAgB;AACdG,MAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,EAAqC,MAArC;AACAJ,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD,KAHD,MAGO;AACLE,MAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,EAAqC,OAArC;AACAJ,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD;AACF,GARD;;AAUAJ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,UAAU,GAAGH,MAAM,CAACC,YAAP,CAAoBG,OAApB,CAA4B,OAA5B,MAAyC,MAA5D;;AACA,QAAID,UAAJ,EAAgB;AACdL,MAAAA,WAAW,CAACK,UAAD,CAAX;AACD,KAFD,MAEO;AACLL,MAAAA,WAAW,CAAC,OAAD,CAAX;AACAE,MAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,EAAqC,OAArC;AACD;;AACDG,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACD,GATQ,EASN,EATM,CAAT;AAWA,SAAO,CAACR,SAAD,EAAYE,WAAZ,EAAyBO,gBAAzB,CAAP;AACD,CA1BM","sourcesContent":["import { useEffect, useState } from 'react';\n\nexport const useDarkMode = () => {\n  const [ darkTheme, changeTheme ] = useState(false);\n  // const [ componentMounted, setComponentMounted ] = useState(false);\n\n  const toggleTheme = () => {\n    if (!darkTheme) {\n      window.localStorage.setItem('theme', 'dark');\n      changeTheme(true);\n    } else {\n      window.localStorage.setItem('theme', 'light');\n      changeTheme(false);\n    }\n  };\n\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem('theme') === 'dark';\n    if (localTheme) {\n      changeTheme(localTheme);\n    } else {\n      changeTheme('light')\n      window.localStorage.setItem('theme', 'light')\n    }\n    setComponentMounted(true);\n  }, []);\n  \n  return [darkTheme, toggleTheme, componentMounted]\n};"]},"metadata":{},"sourceType":"module"}