{"ast":null,"code":"import * as Redux from 'redux';\nimport { applyMiddleware, compose, createStore, combineReducers } from 'redux';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n}\n\nfunction createReduxStore(bag) {\n  for (var _iterator = _createForOfIteratorHelperLoose(bag.models), _step; !(_step = _iterator()).done;) {\n    var model = _step.value;\n    createModelReducer(bag, model);\n  }\n\n  var rootReducer = createRootReducer(bag);\n  var middlewares = applyMiddleware.apply(Redux, bag.reduxConfig.middlewares);\n  var enhancers = composeEnhancersWithDevtools(bag.reduxConfig.devtoolOptions).apply(void 0, bag.reduxConfig.enhancers.concat([middlewares]));\n  var createStore$1 = bag.reduxConfig.createStore || createStore;\n  var bagInitialState = bag.reduxConfig.initialState;\n  var initialState = bagInitialState === undefined ? {} : bagInitialState;\n  return createStore$1(rootReducer, initialState, enhancers);\n}\n\nfunction createModelReducer(bag, model) {\n  var modelReducers = {};\n\n  for (var _i = 0, _Object$keys = Object.keys(model.reducers); _i < _Object$keys.length; _i++) {\n    var reducerKey = _Object$keys[_i];\n    var actionName = isAlreadyActionName(reducerKey) ? reducerKey : model.name + \"/\" + reducerKey;\n    modelReducers[actionName] = model.reducers[reducerKey];\n  }\n\n  var combinedReducer = function combinedReducer(state, action) {\n    if (state === void 0) {\n      state = model.state;\n    }\n\n    if (action.type in modelReducers) {\n      return modelReducers[action.type](state, action.payload);\n    }\n\n    return state;\n  };\n\n  var modelBaseReducer = model.baseReducer;\n  var reducer = !modelBaseReducer ? combinedReducer : function (state, action) {\n    if (state === void 0) {\n      state = model.state;\n    }\n\n    return combinedReducer(modelBaseReducer(state, action), action);\n  };\n  bag.forEachPlugin('onReducer', function (onReducer) {\n    reducer = onReducer(reducer, model.name, bag) || reducer;\n  });\n  bag.reduxConfig.reducers[model.name] = reducer;\n}\n\nfunction createRootReducer(bag) {\n  var rootReducers = bag.reduxConfig.rootReducers;\n  var mergedReducers = mergeReducers(bag.reduxConfig);\n  var rootReducer = mergedReducers;\n\n  if (rootReducers && Object.keys(rootReducers).length) {\n    rootReducer = function rootReducer(state, action) {\n      var actionRootReducer = rootReducers[action.type];\n\n      if (actionRootReducer) {\n        return mergedReducers(actionRootReducer(state, action), action);\n      }\n\n      return mergedReducers(state, action);\n    };\n  }\n\n  bag.forEachPlugin('onRootReducer', function (onRootReducer) {\n    rootReducer = onRootReducer(rootReducer, bag) || rootReducer;\n  });\n  return rootReducer;\n}\n\nfunction mergeReducers(reduxConfig) {\n  var combineReducers$1 = reduxConfig.combineReducers || combineReducers;\n\n  if (!Object.keys(reduxConfig.reducers).length) {\n    return function (state) {\n      return state;\n    };\n  }\n\n  return combineReducers$1(reduxConfig.reducers);\n}\n\nfunction composeEnhancersWithDevtools(devtoolOptions) {\n  if (devtoolOptions === void 0) {\n    devtoolOptions = {};\n  }\n\n  var _devtoolOptions = devtoolOptions,\n      disabled = _devtoolOptions.disabled,\n      options = _objectWithoutPropertiesLoose(_devtoolOptions, [\"disabled\"]);\n\n  return !disabled && typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(options) : compose;\n}\n\nfunction isAlreadyActionName(reducerKey) {\n  return reducerKey.indexOf('/') > -1;\n}\n\nvar isObject = function isObject(obj) {\n  return typeof obj === 'object' && obj !== null && !Array.isArray(obj);\n};\n\nvar ifDefinedIsFunction = function ifDefinedIsFunction(func) {\n  return !func || typeof func === 'function';\n};\n\nvar validate = function validate(runValidations) {\n  if (process.env.NODE_ENV !== 'production') {\n    var validations = runValidations();\n    var errors = [];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(validations), _step; !(_step = _iterator()).done;) {\n      var validation = _step.value;\n      var isInvalid = validation[0];\n      var errorMessage = validation[1];\n\n      if (isInvalid) {\n        errors.push(errorMessage);\n      }\n    }\n\n    if (errors.length > 0) {\n      throw new Error(errors.join(', '));\n    }\n  }\n};\n\nvar validateConfig = function validateConfig(config) {\n  validate(function () {\n    return [[!Array.isArray(config.plugins), 'init config.plugins must be an array'], [!isObject(config.models), 'init config.models must be an object'], [!isObject(config.redux.reducers), 'init config.redux.reducers must be an object'], [!Array.isArray(config.redux.middlewares), 'init config.redux.middlewares must be an array'], [!Array.isArray(config.redux.enhancers), 'init config.redux.enhancers must be an array of functions'], [!ifDefinedIsFunction(config.redux.combineReducers), 'init config.redux.combineReducers must be a function'], [!ifDefinedIsFunction(config.redux.createStore), 'init config.redux.createStore must be a function']];\n  });\n};\n\nvar validateModel = function validateModel(model) {\n  validate(function () {\n    return [[!model, 'model config is required'], [typeof model.name !== 'string', 'model \"name\" [string] is required'], [model.state === undefined && model.baseReducer === undefined, 'model \"state\" is required'], [!ifDefinedIsFunction(model.baseReducer), 'model \"baseReducer\" must be a function']];\n  });\n};\n\nvar validatePlugin = function validatePlugin(plugin) {\n  validate(function () {\n    return [[!ifDefinedIsFunction(plugin.onStoreCreated), 'Plugin onStoreCreated must be a function'], [!ifDefinedIsFunction(plugin.onModel), 'Plugin onModel must be a function'], [!ifDefinedIsFunction(plugin.onReducer), 'Plugin onReducer must be a function'], [!ifDefinedIsFunction(plugin.onRootReducer), 'Plugin onRootReducer must be a function'], [!ifDefinedIsFunction(plugin.createMiddleware), 'Plugin createMiddleware must be a function']];\n  });\n};\n\nvar validateModelReducer = function validateModelReducer(modelName, reducers, reducerName) {\n  validate(function () {\n    return [[!!reducerName.match(/\\/.+\\//), \"Invalid reducer name (\" + modelName + \"/\" + reducerName + \")\"], [typeof reducers[reducerName] !== 'function', \"Invalid reducer (\" + modelName + \"/\" + reducerName + \"). Must be a function\"]];\n  });\n};\n\nvar validateModelEffect = function validateModelEffect(modelName, effects, effectName) {\n  validate(function () {\n    return [[!!effectName.match(/\\//), \"Invalid effect name (\" + modelName + \"/\" + effectName + \")\"], [typeof effects[effectName] !== 'function', \"Invalid effect (\" + modelName + \"/\" + effectName + \"). Must be a function\"]];\n  });\n};\n\nvar createActionDispatcher = function createActionDispatcher(rematch, modelName, actionName, isEffect) {\n  return Object.assign(function (payload) {\n    var action = {\n      type: modelName + \"/\" + actionName\n    };\n\n    if (typeof payload !== 'undefined') {\n      action.payload = payload;\n    }\n\n    return rematch.dispatch(action);\n  }, {\n    isEffect: isEffect\n  });\n};\n\nvar createDispatcher = function createDispatcher(rematch, bag, model) {\n  var modelDispatcher = {};\n\n  for (var _i = 0, _Object$keys = Object.keys(model.reducers); _i < _Object$keys.length; _i++) {\n    var reducerName = _Object$keys[_i];\n    validateModelReducer(model.name, model.reducers, reducerName);\n    modelDispatcher[reducerName] = createActionDispatcher(rematch, model.name, reducerName, false);\n  }\n\n  var effects = {};\n\n  if (model.effects) {\n    effects = typeof model.effects === 'function' ? model.effects(rematch.dispatch) : model.effects;\n  }\n\n  for (var _i2 = 0, _Object$keys2 = Object.keys(effects); _i2 < _Object$keys2.length; _i2++) {\n    var effectName = _Object$keys2[_i2];\n    validateModelEffect(model.name, effects, effectName);\n    bag.effects[model.name + \"/\" + effectName] = effects[effectName].bind(modelDispatcher);\n    modelDispatcher[effectName] = createActionDispatcher(rematch, model.name, effectName, true);\n  }\n\n  return modelDispatcher;\n};\n\nfunction createRematchBag(config) {\n  return {\n    models: createNamedModels(config.models),\n    reduxConfig: config.redux,\n    forEachPlugin: function forEachPlugin(method, fn) {\n      for (var _iterator = _createForOfIteratorHelperLoose(config.plugins), _step; !(_step = _iterator()).done;) {\n        var plugin = _step.value;\n\n        if (plugin[method]) {\n          fn(plugin[method]);\n        }\n      }\n    },\n    effects: {}\n  };\n}\n\nfunction createNamedModels(models) {\n  return Object.keys(models).map(function (modelName) {\n    var model = createNamedModel(modelName, models[modelName]);\n    validateModel(model);\n    return model;\n  });\n}\n\nfunction createNamedModel(name, model) {\n  return _extends({\n    name: name,\n    reducers: {}\n  }, model);\n}\n\nfunction createRematchStore(config) {\n  var bag = createRematchBag(config);\n  bag.reduxConfig.middlewares.push(createEffectsMiddleware(bag));\n  bag.forEachPlugin('createMiddleware', function (createMiddleware) {\n    bag.reduxConfig.middlewares.push(createMiddleware(bag));\n  });\n  var reduxStore = createReduxStore(bag);\n\n  var rematchStore = _extends({}, reduxStore, {\n    name: config.name,\n    addModel: function addModel(model) {\n      validateModel(model);\n      createModelReducer(bag, model);\n      prepareModel(this, bag, model);\n      this.replaceReducer(createRootReducer(bag));\n      reduxStore.dispatch({\n        type: '@@redux/REPLACE'\n      });\n    }\n  });\n\n  addExposed(rematchStore, config.plugins);\n  rematchStore.addModel.bind(rematchStore);\n\n  for (var _iterator = _createForOfIteratorHelperLoose(bag.models), _step; !(_step = _iterator()).done;) {\n    var model = _step.value;\n    prepareModel(rematchStore, bag, model);\n  }\n\n  bag.forEachPlugin('onStoreCreated', function (onStoreCreated) {\n    rematchStore = onStoreCreated(rematchStore, bag) || rematchStore;\n  });\n  return rematchStore;\n}\n\nfunction createEffectsMiddleware(bag) {\n  return function (store) {\n    return function (next) {\n      return function (action) {\n        if (action.type in bag.effects) {\n          next(action);\n          return bag.effects[action.type](action.payload, store.getState());\n        }\n\n        return next(action);\n      };\n    };\n  };\n}\n\nfunction prepareModel(rematchStore, bag, model) {\n  rematchStore.dispatch[model.name] = createDispatcher(rematchStore, bag, model);\n  bag.forEachPlugin('onModel', function (onModel) {\n    return onModel(model, rematchStore);\n  });\n}\n\nfunction addExposed(store, plugins) {\n  for (var _iterator2 = _createForOfIteratorHelperLoose(plugins), _step2; !(_step2 = _iterator2()).done;) {\n    var plugin = _step2.value;\n\n    if (plugin.exposed) {\n      var _loop = function _loop() {\n        var key = _Object$keys[_i];\n        var exposedItem = plugin.exposed[key];\n        var isExposedFunction = typeof exposedItem === 'function';\n        store[key] = isExposedFunction ? function () {\n          for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n            params[_key] = arguments[_key];\n          }\n\n          return exposedItem.apply(void 0, [store].concat(params));\n        } : Object.create(plugin.exposed[key]);\n      };\n\n      for (var _i = 0, _Object$keys = Object.keys(plugin.exposed); _i < _Object$keys.length; _i++) {\n        _loop();\n      }\n    }\n  }\n}\n\nvar count = 0;\n\nfunction createConfig(initConfig) {\n  var _initConfig$name, _initConfig$redux$dev, _initConfig$redux;\n\n  var storeName = (_initConfig$name = initConfig.name) !== null && _initConfig$name !== void 0 ? _initConfig$name : \"Rematch Store \" + count;\n  count += 1;\n  var config = {\n    name: storeName,\n    models: initConfig.models || {},\n    plugins: initConfig.plugins || [],\n    redux: _extends({\n      reducers: {},\n      rootReducers: {},\n      enhancers: [],\n      middlewares: []\n    }, initConfig.redux, {\n      devtoolOptions: _extends({\n        name: storeName\n      }, (_initConfig$redux$dev = (_initConfig$redux = initConfig.redux) === null || _initConfig$redux === void 0 ? void 0 : _initConfig$redux.devtoolOptions) !== null && _initConfig$redux$dev !== void 0 ? _initConfig$redux$dev : {})\n    })\n  };\n  validateConfig(config);\n\n  for (var _iterator = _createForOfIteratorHelperLoose(config.plugins), _step; !(_step = _iterator()).done;) {\n    var plugin = _step.value;\n\n    if (plugin.config) {\n      config.models = merge(config.models, plugin.config.models);\n\n      if (plugin.config.redux) {\n        config.redux.initialState = merge(config.redux.initialState, plugin.config.redux.initialState);\n        config.redux.reducers = merge(config.redux.reducers, plugin.config.redux.reducers);\n        config.redux.rootReducers = merge(config.redux.rootReducers, plugin.config.redux.reducers);\n        config.redux.enhancers = [].concat(config.redux.enhancers, plugin.config.redux.enhancers || []);\n        config.redux.middlewares = [].concat(config.redux.middlewares, plugin.config.redux.middlewares || []);\n        config.redux.combineReducers = config.redux.combineReducers || plugin.config.redux.combineReducers;\n        config.redux.createStore = config.redux.createStore || plugin.config.redux.createStore;\n      }\n    }\n\n    validatePlugin(plugin);\n  }\n\n  return config;\n}\n\nfunction merge(original, extra) {\n  return extra ? _extends({}, extra, original) : original;\n}\n\nvar init = function init(initConfig) {\n  var config = createConfig(initConfig || {});\n  return createRematchStore(config);\n};\n\nvar createModel = function createModel() {\n  return function (mo) {\n    return mo;\n  };\n};\n\nvar index = {\n  init: init,\n  createModel: createModel\n};\nexport default index;\nexport { createModel, init };","map":{"version":3,"sources":["../src/reduxStore.ts","../src/validate.ts","../src/dispatcher.ts","../src/bag.ts","../src/rematchStore.ts","../src/config.ts","../src/index.ts"],"names":["createReduxStore","bag","model","createModelReducer","rootReducer","createRootReducer","middlewares","Redux","enhancers","composeEnhancersWithDevtools","createStore","bagInitialState","initialState","modelReducers","reducerKey","Object","actionName","isAlreadyActionName","combinedReducer","state","action","modelBaseReducer","reducer","onReducer","rootReducers","reduxConfig","mergedReducers","mergeReducers","actionRootReducer","onRootReducer","combineReducers","devtoolOptions","disabled","options","window","isObject","obj","Array","ifDefinedIsFunction","validate","process","validations","runValidations","errors","validation","isInvalid","errorMessage","validateConfig","config","validateModel","validatePlugin","plugin","validateModelReducer","reducerName","reducers","validateModelEffect","effectName","effects","createActionDispatcher","type","modelName","rematch","isEffect","createDispatcher","modelDispatcher","createRematchBag","models","createNamedModels","forEachPlugin","fn","createNamedModel","name","createRematchStore","createEffectsMiddleware","createMiddleware","reduxStore","rematchStore","addModel","prepareModel","addExposed","onStoreCreated","next","store","onModel","key","exposedItem","isExposedFunction","params","count","createConfig","initConfig","storeName","plugins","redux","merge","extra","init","createModel"],"mappings":"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","sourcesContent":["import * as Redux from 'redux'\nimport {\n\tAction,\n\tConfigRedux,\n\tModelReducers,\n\tNamedModel,\n\tRematchBag,\n\tDevtoolOptions,\n\tModels,\n\tRematchRootState,\n} from './types'\n\n/**\n * Creates 'combined' reducer for each model and then merges those reducers\n * together into a 'root' reducer. It then creates a Redux store with\n * middlewares and enhancers.\n */\nexport default function createReduxStore<TModels extends Models>(\n\tbag: RematchBag\n): Redux.Store<RematchRootState<TModels>> {\n\tfor (const model of bag.models) {\n\t\tcreateModelReducer(bag, model)\n\t}\n\n\tconst rootReducer = createRootReducer<RematchRootState<TModels>>(bag)\n\n\tconst middlewares = Redux.applyMiddleware(...bag.reduxConfig.middlewares)\n\tconst enhancers = composeEnhancersWithDevtools(\n\t\tbag.reduxConfig.devtoolOptions\n\t)(...bag.reduxConfig.enhancers, middlewares)\n\n\tconst createStore = bag.reduxConfig.createStore || Redux.createStore\n\tconst bagInitialState = bag.reduxConfig.initialState\n\tconst initialState = bagInitialState === undefined ? {} : bagInitialState\n\n\treturn createStore<\n\t\tRematchRootState<TModels>,\n\t\tAction,\n\t\tany,\n\t\ttypeof initialState\n\t>(rootReducer, initialState, enhancers)\n}\n\n/**\n * Creates a combined reducer for a given model. What it means is that:\n * - it forms an action name for each model's reducer as 'modelName/reducerKey'\n * - it creates a mapping from action name to its reducer\n * - it wraps the mapping with a function (combined reducer) that selects and\n *   runs a reducer based on the incoming action\n * - if the model also has a base reducer defined, it creates a function which\n *   first runs the incoming action through this reducer and then passes the\n *   resulting state and the same action to combined reducer\n *\n * The final result - a function, is returned.\n */\nexport function createModelReducer<\n\tTModel extends NamedModel,\n\tTState extends TModel['state']\n>(bag: RematchBag, model: TModel): void {\n\tconst modelReducers: ModelReducers<TState> = {}\n\n\t// build action name for each reducer and create mapping from name to reducer\n\tfor (const reducerKey of Object.keys(model.reducers)) {\n\t\tconst actionName = isAlreadyActionName(reducerKey)\n\t\t\t? reducerKey\n\t\t\t: `${model.name}/${reducerKey}`\n\n\t\tmodelReducers[actionName] = model.reducers[reducerKey]\n\t}\n\n\t// select and run a reducer based on the incoming action\n\tconst combinedReducer = (\n\t\tstate: TState = model.state,\n\t\taction: Action\n\t): TState => {\n\t\tif (action.type in modelReducers) {\n\t\t\treturn modelReducers[action.type](state, action.payload)\n\t\t}\n\n\t\treturn state\n\t}\n\n\tconst modelBaseReducer = model.baseReducer\n\n\t// when baseReducer is defined, run the action first through it\n\tlet reducer = !modelBaseReducer\n\t\t? combinedReducer\n\t\t: (state: TState = model.state, action: Action): TState =>\n\t\t\t\tcombinedReducer(modelBaseReducer(state, action), action)\n\n\tbag.forEachPlugin('onReducer', (onReducer) => {\n\t\treducer = onReducer(reducer, model.name, bag) || reducer\n\t})\n\n\tbag.reduxConfig.reducers[model.name] = reducer\n}\n\n/**\n * It merges all reducers in config using mergeReducers function. Additionally,\n * if user supplied any rootReducers, a wrapper function around merged reducers\n * is created. It first feeds each into its corresponding 'root' reducer (if\n * it's available), and then passes on the resulting state to the merged reducer.\n */\nexport function createRootReducer<TRootState>(\n\tbag: RematchBag\n): Redux.Reducer<TRootState, Action> {\n\tconst { rootReducers } = bag.reduxConfig\n\tconst mergedReducers = mergeReducers<TRootState>(bag.reduxConfig)\n\tlet rootReducer = mergedReducers\n\n\tif (rootReducers && Object.keys(rootReducers).length) {\n\t\trootReducer = (\n\t\t\tstate: TRootState | undefined,\n\t\t\taction: Action\n\t\t): TRootState => {\n\t\t\tconst actionRootReducer = rootReducers[action.type]\n\n\t\t\tif (actionRootReducer) {\n\t\t\t\treturn mergedReducers(actionRootReducer(state, action), action)\n\t\t\t}\n\n\t\t\treturn mergedReducers(state, action)\n\t\t}\n\t}\n\n\tbag.forEachPlugin('onRootReducer', (onRootReducer) => {\n\t\trootReducer = onRootReducer(rootReducer, bag) || rootReducer\n\t})\n\n\treturn rootReducer\n}\n\n/**\n * Merges all reducers defined in config into one function using user supplied\n * or default combineReducers function.\n * If there are no reducers defined, it returns a function that just returns\n * the state for all incoming actions.\n */\nfunction mergeReducers<TRootState>(\n\treduxConfig: ConfigRedux<TRootState>\n): Redux.Reducer<TRootState, Action> {\n\tconst combineReducers = reduxConfig.combineReducers || Redux.combineReducers\n\n\tif (!Object.keys(reduxConfig.reducers).length) {\n\t\treturn (state: any): TRootState => state\n\t}\n\n\treturn combineReducers(reduxConfig.reducers as Redux.ReducersMapObject)\n}\n\n/**\n * Returns Redux Devtools compose method unless it's disabled, in which case it\n * returns default Redux.compose.\n */\nfunction composeEnhancersWithDevtools(\n\tdevtoolOptions: DevtoolOptions = {}\n): (...args: any[]) => Redux.StoreEnhancer {\n\tconst { disabled, ...options } = devtoolOptions\n\n\treturn !disabled &&\n\t\ttypeof window === 'object' &&\n\t\twindow.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n\t\t? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(options)\n\t\t: Redux.compose\n}\n\n/**\n * Determines if a reducer key is already an action name, for example -\n * a listener on another model.\n */\nfunction isAlreadyActionName(reducerKey: string): boolean {\n\treturn reducerKey.indexOf('/') > -1\n}\n","import {\n\tConfig,\n\tModelEffects,\n\tModelReducers,\n\tNamedModel,\n\tPlugin,\n} from './types'\n\n/**\n * If the first item is true, it means there is an error described by\n * the second item.\n */\nexport type Validation = [boolean | undefined, string]\n\n/**\n * Checks if a parameter is a valid object.\n */\nexport const isObject = (obj: any): boolean =>\n\ttypeof obj === 'object' && obj !== null && !Array.isArray(obj)\n\n/**\n * Checks if a parameter is a valid function but only when it's defined.\n * Otherwise, always returns true.\n */\nexport const ifDefinedIsFunction = (func: any): boolean =>\n\t!func || typeof func === 'function'\n\n/**\n * Takes an array of arrays of validations. Collects all errors and throws.\n * Should be used by plugins to keep the validation behaviour the same for all\n * Rematch-related libraries.\n */\nconst validate = (runValidations: () => Validation[]): void => {\n\tif (process.env.NODE_ENV !== 'production') {\n\t\tconst validations = runValidations()\n\t\tconst errors: string[] = []\n\n\t\tfor (const validation of validations) {\n\t\t\tconst isInvalid = validation[0]\n\t\t\tconst errorMessage = validation[1]\n\t\t\tif (isInvalid) {\n\t\t\t\terrors.push(errorMessage)\n\t\t\t}\n\t\t}\n\n\t\tif (errors.length > 0) {\n\t\t\tthrow new Error(errors.join(', '))\n\t\t}\n\t}\n}\n\nexport const validateConfig = (config: Config<any>): void => {\n\tvalidate(() => [\n\t\t[!Array.isArray(config.plugins), 'init config.plugins must be an array'],\n\t\t[!isObject(config.models), 'init config.models must be an object'],\n\t\t[\n\t\t\t!isObject(config.redux.reducers),\n\t\t\t'init config.redux.reducers must be an object',\n\t\t],\n\t\t[\n\t\t\t!Array.isArray(config.redux.middlewares),\n\t\t\t'init config.redux.middlewares must be an array',\n\t\t],\n\t\t[\n\t\t\t!Array.isArray(config.redux.enhancers),\n\t\t\t'init config.redux.enhancers must be an array of functions',\n\t\t],\n\t\t[\n\t\t\t!ifDefinedIsFunction(config.redux.combineReducers),\n\t\t\t'init config.redux.combineReducers must be a function',\n\t\t],\n\t\t[\n\t\t\t!ifDefinedIsFunction(config.redux.createStore),\n\t\t\t'init config.redux.createStore must be a function',\n\t\t],\n\t])\n}\n\nexport const validateModel = (model: NamedModel): void => {\n\tvalidate(() => [\n\t\t[!model, 'model config is required'],\n\t\t[typeof model.name !== 'string', 'model \"name\" [string] is required'],\n\t\t[\n\t\t\tmodel.state === undefined && model.baseReducer === undefined,\n\t\t\t'model \"state\" is required',\n\t\t],\n\t\t[\n\t\t\t!ifDefinedIsFunction(model.baseReducer),\n\t\t\t'model \"baseReducer\" must be a function',\n\t\t],\n\t])\n}\n\nexport const validatePlugin = (plugin: Plugin): void => {\n\tvalidate(() => [\n\t\t[\n\t\t\t!ifDefinedIsFunction(plugin.onStoreCreated),\n\t\t\t'Plugin onStoreCreated must be a function',\n\t\t],\n\t\t[!ifDefinedIsFunction(plugin.onModel), 'Plugin onModel must be a function'],\n\t\t[\n\t\t\t!ifDefinedIsFunction(plugin.onReducer),\n\t\t\t'Plugin onReducer must be a function',\n\t\t],\n\t\t[\n\t\t\t!ifDefinedIsFunction(plugin.onRootReducer),\n\t\t\t'Plugin onRootReducer must be a function',\n\t\t],\n\t\t[\n\t\t\t!ifDefinedIsFunction(plugin.createMiddleware),\n\t\t\t'Plugin createMiddleware must be a function',\n\t\t],\n\t])\n}\n\nexport const validateModelReducer = (\n\tmodelName: string,\n\treducers: ModelReducers,\n\treducerName: string\n): void => {\n\tvalidate(() => [\n\t\t[\n\t\t\t!!reducerName.match(/\\/.+\\//),\n\t\t\t`Invalid reducer name (${modelName}/${reducerName})`,\n\t\t],\n\t\t[\n\t\t\ttypeof reducers[reducerName] !== 'function',\n\t\t\t`Invalid reducer (${modelName}/${reducerName}). Must be a function`,\n\t\t],\n\t])\n}\n\nexport const validateModelEffect = (\n\tmodelName: string,\n\teffects: ModelEffects,\n\teffectName: string\n): void => {\n\tvalidate(() => [\n\t\t[\n\t\t\t!!effectName.match(/\\//),\n\t\t\t`Invalid effect name (${modelName}/${effectName})`,\n\t\t],\n\t\t[\n\t\t\ttypeof effects[effectName] !== 'function',\n\t\t\t`Invalid effect (${modelName}/${effectName}). Must be a function`,\n\t\t],\n\t])\n}\n\nexport default validate\n","/* eslint-disable @typescript-eslint/ban-ts-ignore */\nimport {\n\tAction,\n\tModelDispatcher,\n\tModelEffects,\n\tModelEffectsCreator,\n\tModels,\n\tNamedModel,\n\tRematchBag,\n\tRematchDispatcher,\n\tEffectRematchDispatcher,\n\tRematchStore,\n} from './types'\nimport { validateModelEffect, validateModelReducer } from './validate'\n\n/**\n * Builds a dispatcher for given model name and action name. The dispatched\n * action will have a type `modelName/actionName`.\n * Additionally, adds the isEffect property to the created dispatcher.\n * isEffect helps to differentiate effects dispatchers from reducer dispatchers.\n */\nconst createActionDispatcher = <TModels extends Models>(\n\trematch: RematchStore<TModels>,\n\tmodelName: string,\n\tactionName: string,\n\tisEffect: boolean\n): RematchDispatcher | EffectRematchDispatcher => {\n\treturn Object.assign(\n\t\t(payload?: any): Action => {\n\t\t\tconst action: Action = { type: `${modelName}/${actionName}` }\n\n\t\t\tif (typeof payload !== 'undefined') {\n\t\t\t\taction.payload = payload\n\t\t\t}\n\n\t\t\treturn rematch.dispatch(action)\n\t\t},\n\t\t{\n\t\t\tisEffect,\n\t\t}\n\t)\n}\n\n/**\n * Creates a dispatcher object for a model - it contains a mapping from all\n * reducers and effects *names* to functions which dispatch their corresponding\n * actions.\n */\nconst createDispatcher = <TModels extends Models, TModel extends NamedModel>(\n\trematch: RematchStore<TModels>,\n\tbag: RematchBag,\n\tmodel: TModel\n): ModelDispatcher<TModel, TModels> => {\n\tconst modelDispatcher = {} as ModelDispatcher<TModel, TModels>\n\n\t// map reducer names to dispatch actions\n\tfor (const reducerName of Object.keys(model.reducers)) {\n\t\tvalidateModelReducer(model.name, model.reducers, reducerName)\n\n\t\t// @ts-ignore\n\t\tmodelDispatcher[reducerName] = createActionDispatcher(\n\t\t\trematch,\n\t\t\tmodel.name,\n\t\t\treducerName,\n\t\t\tfalse\n\t\t)\n\t}\n\n\tlet effects: ModelEffects = {}\n\n\t// 'effects' might be actually a function creating effects\n\tif (model.effects) {\n\t\teffects =\n\t\t\ttypeof model.effects === 'function'\n\t\t\t\t? (model.effects as ModelEffectsCreator<TModels>)(rematch.dispatch)\n\t\t\t\t: model.effects\n\t}\n\n\t// map effects names to dispatch actions\n\tfor (const effectName of Object.keys(effects)) {\n\t\tvalidateModelEffect(model.name, effects, effectName)\n\n\t\t// @ts-ignore\n\t\tbag.effects[`${model.name}/${effectName}`] = effects[effectName].bind(\n\t\t\t// @ts-ignore\n\t\t\tmodelDispatcher\n\t\t)\n\n\t\t// @ts-ignore\n\t\tmodelDispatcher[effectName] = createActionDispatcher(\n\t\t\trematch,\n\t\t\tmodel.name,\n\t\t\teffectName,\n\t\t\ttrue\n\t\t)\n\t}\n\n\treturn modelDispatcher\n}\n\nexport default createDispatcher\n","import {\n\tConfig,\n\tModel,\n\tModels,\n\tNamedModel,\n\tPluginHooks,\n\tRematchBag,\n} from './types'\nimport { validateModel } from './validate'\n\n/**\n * Creates and returns a 'Rematch Bag', which is a set of configuration options\n * used by the Rematch library in various functions.\n */\nexport default function createRematchBag<TModels extends Models>(\n\tconfig: Config<TModels>\n): RematchBag {\n\treturn {\n\t\tmodels: createNamedModels(config.models),\n\t\treduxConfig: config.redux,\n\t\tforEachPlugin<Hook extends keyof PluginHooks>(\n\t\t\tmethod: Hook,\n\t\t\tfn: (content: NonNullable<PluginHooks[Hook]>) => void\n\t\t): void {\n\t\t\tfor (const plugin of config.plugins) {\n\t\t\t\tif (plugin[method]) {\n\t\t\t\t\tfn(plugin[method] as NonNullable<PluginHooks[Hook]>)\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\teffects: {},\n\t}\n}\n\n/**\n * Transforms mapping from a model name to a model object, into an array of\n * 'named' models - models with embedded name and default value for reducers\n * if user didn't provide any.\n */\nfunction createNamedModels<M extends Models>(models: M): NamedModel[] {\n\treturn Object.keys(models).map((modelName: string) => {\n\t\tconst model = createNamedModel(modelName, models[modelName])\n\t\tvalidateModel(model)\n\t\treturn model\n\t})\n}\n\n/**\n * Transforms a model into 'named' model - model which contains 'name' and\n * 'reducers' properties if user didn't provide any.\n */\nfunction createNamedModel(name: string, model: Model): NamedModel {\n\treturn {\n\t\tname,\n\t\treducers: {},\n\t\t...model,\n\t}\n}\n","/* eslint-disable @typescript-eslint/ban-ts-ignore */\nimport { Middleware } from 'redux'\nimport {\n\tAction,\n\tConfig,\n\tExposedFunction,\n\tModels,\n\tNamedModel,\n\tObjectNotAFunction,\n\tPlugin,\n\tRematchBag,\n\tRematchStore,\n} from './types'\nimport createReduxStore, {\n\tcreateModelReducer,\n\tcreateRootReducer,\n} from './reduxStore'\nimport createDispatcher from './dispatcher'\nimport { validateModel } from './validate'\nimport createRematchBag from './bag'\n\nexport default function createRematchStore<\n\tTModels extends Models,\n\tTExtraModels extends Models\n>(config: Config<TModels>): RematchStore<TModels & TExtraModels> {\n\t// setup rematch 'bag' for storing useful values and functions\n\tconst bag = createRematchBag(config)\n\n\t// add middleware for handling effects\n\tbag.reduxConfig.middlewares.push(createEffectsMiddleware(bag))\n\n\t// collect middlewares from plugins\n\tbag.forEachPlugin('createMiddleware', (createMiddleware) => {\n\t\tbag.reduxConfig.middlewares.push(createMiddleware(bag))\n\t})\n\n\tconst reduxStore = createReduxStore(bag)\n\n\tlet rematchStore = {\n\t\t...reduxStore,\n\t\tname: config.name,\n\t\taddModel(model: NamedModel) {\n\t\t\tvalidateModel(model)\n\t\t\tcreateModelReducer(bag, model)\n\t\t\tprepareModel<TModels & TExtraModels, typeof model>(this, bag, model)\n\t\t\tthis.replaceReducer(createRootReducer(bag))\n\t\t\treduxStore.dispatch({ type: '@@redux/REPLACE' })\n\t\t},\n\t} as RematchStore<TModels & TExtraModels>\n\n\taddExposed(rematchStore, config.plugins)\n\n\trematchStore.addModel.bind(rematchStore)\n\n\t// generate dispatch[modelName][actionName] for all reducers and effects\n\tfor (const model of bag.models) {\n\t\tprepareModel<TModels & TExtraModels, typeof model>(rematchStore, bag, model)\n\t}\n\n\tbag.forEachPlugin('onStoreCreated', (onStoreCreated) => {\n\t\trematchStore = onStoreCreated(rematchStore, bag) || rematchStore\n\t})\n\n\treturn rematchStore\n}\n\nfunction createEffectsMiddleware(bag: RematchBag): Middleware {\n\treturn (store) => (next) => (action: Action): any => {\n\t\tif (action.type in bag.effects) {\n\t\t\t// first run reducer action if exists\n\t\t\tnext(action)\n\n\t\t\t// then run the effect and return its result\n\t\t\t// @ts-ignore\n\t\t\treturn bag.effects[action.type](action.payload, store.getState())\n\t\t}\n\n\t\treturn next(action)\n\t}\n}\n\nfunction prepareModel<TModels extends Models, TModel extends NamedModel>(\n\trematchStore: RematchStore<TModels>,\n\tbag: RematchBag,\n\tmodel: TModel\n): void {\n\t// @ts-ignore\n\trematchStore.dispatch[model.name] = createDispatcher<TModels, TModel>(\n\t\trematchStore,\n\t\tbag,\n\t\tmodel\n\t)\n\n\tbag.forEachPlugin('onModel', (onModel) => onModel(model, rematchStore))\n}\n\n/**\n * Adds properties exposed by plugins into the Rematch instance. If a exposed\n * property is a function, it passes rematch as the first argument.\n *\n * If you're implementing a plugin in TypeScript, extend Rematch namespace by\n * adding the properties that you exposed from your plugin.\n */\nfunction addExposed(store: RematchStore<any>, plugins: Plugin[]): void {\n\tfor (const plugin of plugins) {\n\t\tif (plugin.exposed) {\n\t\t\tfor (const key of Object.keys(plugin.exposed)) {\n\t\t\t\tconst exposedItem = plugin.exposed[key] as\n\t\t\t\t\t| ExposedFunction\n\t\t\t\t\t| ObjectNotAFunction\n\t\t\t\tconst isExposedFunction = typeof exposedItem === 'function'\n\n\t\t\t\t// @ts-ignore\n\t\t\t\tstore[key] = isExposedFunction\n\t\t\t\t\t? (...params: any[]): any =>\n\t\t\t\t\t\t\t(exposedItem as ExposedFunction)(store, ...params)\n\t\t\t\t\t: Object.create(plugin.exposed[key])\n\t\t\t}\n\t\t}\n\t}\n}\n","import { InitConfig, Config, Models } from './types'\nimport { validateConfig, validatePlugin } from './validate'\n\nlet count = 0\n\n/**\n * Builds complete Rematch config using default values for properties not\n * supplied by the user. Additionally, applies changes to the config made by\n * the plugins selected by the user.\n */\nexport default function createConfig<TModels extends Models>(\n\tinitConfig: InitConfig<TModels>\n): Config<TModels> {\n\tconst storeName = initConfig.name ?? `Rematch Store ${count}`\n\n\tcount += 1\n\n\tconst config = {\n\t\tname: storeName,\n\t\tmodels: initConfig.models || ({} as TModels),\n\t\tplugins: initConfig.plugins || [],\n\t\tredux: {\n\t\t\treducers: {},\n\t\t\trootReducers: {},\n\t\t\tenhancers: [],\n\t\t\tmiddlewares: [],\n\t\t\t...initConfig.redux,\n\t\t\tdevtoolOptions: {\n\t\t\t\tname: storeName,\n\t\t\t\t...(initConfig.redux?.devtoolOptions ?? {}),\n\t\t\t},\n\t\t},\n\t} as Config<TModels>\n\n\tvalidateConfig(config)\n\n\t// Apply changes to the config required by plugins\n\tfor (const plugin of config.plugins) {\n\t\tif (plugin.config) {\n\t\t\t// Collect new models\n\t\t\tconfig.models = merge(config.models, plugin.config.models)\n\n\t\t\t// Collect redux configuration changes\n\t\t\tif (plugin.config.redux) {\n\t\t\t\tconfig.redux.initialState = merge(\n\t\t\t\t\tconfig.redux.initialState,\n\t\t\t\t\tplugin.config.redux.initialState\n\t\t\t\t)\n\n\t\t\t\tconfig.redux.reducers = merge(\n\t\t\t\t\tconfig.redux.reducers,\n\t\t\t\t\tplugin.config.redux.reducers\n\t\t\t\t)\n\n\t\t\t\tconfig.redux.rootReducers = merge(\n\t\t\t\t\tconfig.redux.rootReducers,\n\t\t\t\t\tplugin.config.redux.reducers\n\t\t\t\t)\n\n\t\t\t\tconfig.redux.enhancers = [\n\t\t\t\t\t...config.redux.enhancers,\n\t\t\t\t\t...(plugin.config.redux.enhancers || []),\n\t\t\t\t]\n\n\t\t\t\tconfig.redux.middlewares = [\n\t\t\t\t\t...config.redux.middlewares,\n\t\t\t\t\t...(plugin.config.redux.middlewares || []),\n\t\t\t\t]\n\n\t\t\t\tconfig.redux.combineReducers =\n\t\t\t\t\tconfig.redux.combineReducers || plugin.config.redux.combineReducers\n\n\t\t\t\tconfig.redux.createStore =\n\t\t\t\t\tconfig.redux.createStore || plugin.config.redux.createStore\n\t\t\t}\n\t\t}\n\n\t\tvalidatePlugin(plugin)\n\t}\n\n\treturn config\n}\n\n/**\n * Shallow merges original object with the extra object, giving the precedence\n * to the original object.\n */\nfunction merge<T extends object>(original: T, extra: T | undefined): T {\n\treturn extra ? { ...extra, ...original } : original\n}\n","import { Reducer as ReduxReducer } from 'redux'\nimport createRematchStore from './rematchStore'\nimport {\n\tInitConfig,\n\tModels,\n\tRematchStore,\n\tModelReducers,\n\tModelEffects,\n\tModelEffectsCreator,\n\tRematchDispatch,\n} from './types'\nimport createConfig from './config'\n\n/**\n * Patch for the incompatibility between Redux.Dispatch and RematchDispatch\n */\ndeclare module 'react-redux' {\n\tinterface Connect {\n\t\t<\n\t\t\tRM extends Models<RM> = Models,\n\t\t\tState = DefaultRootState,\n\t\t\tTStateProps = {},\n\t\t\tTDispatchProps = {},\n\t\t\tTOwnProps = {}\n\t\t>(\n\t\t\tmapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n\t\t\tmapDispatchToProps: MapRematchDispatchToPropsNonObject<\n\t\t\t\tTDispatchProps,\n\t\t\t\tTOwnProps,\n\t\t\t\tRM\n\t\t\t>\n\t\t): InferableComponentEnhancerWithProps<\n\t\t\tTStateProps & TDispatchProps,\n\t\t\tTOwnProps\n\t\t>\n\t}\n\n\ttype MapRematchDispatchToPropsNonObject<\n\t\tTDispatchProps,\n\t\tTOwnProps,\n\t\tRM extends Models<RM> = Models\n\t> =\n\t\t| MapRematchDispatchToPropsFactory<TDispatchProps, TOwnProps, RM>\n\t\t| MapRematchDispatchToPropsFunction<TDispatchProps, TOwnProps, RM>\n\n\ttype MapRematchDispatchToPropsFactory<\n\t\tTDispatchProps,\n\t\tTOwnProps,\n\t\tRM extends Models<RM> = Models\n\t> = (\n\t\tdispatch: RematchDispatch<RM>,\n\t\townProps: TOwnProps\n\t) => MapRematchDispatchToPropsFunction<TDispatchProps, TOwnProps, RM>\n\n\ttype MapRematchDispatchToPropsFunction<\n\t\tTDispatchProps,\n\t\tTOwnProps,\n\t\tRM extends Models<RM> = Models\n\t> = (dispatch: RematchDispatch<RM>, ownProps: TOwnProps) => TDispatchProps\n}\n\n/**\n * Prepares a complete configuration and creates a Rematch store.\n */\nexport const init = <\n\tTModels extends Models<TModels>,\n\tTExtraModels extends Models\n>(\n\tinitConfig?: InitConfig<TModels>\n): RematchStore<TModels & TExtraModels> => {\n\tconst config = createConfig(initConfig || {})\n\treturn createRematchStore<TModels, TExtraModels>(config)\n}\n\nexport const createModel: <RM extends Models<RM>>() => <\n\tR extends ModelReducers<S>,\n\tBR extends ReduxReducer<BS>,\n\tE extends ModelEffects | ModelEffectsCreator<RM>,\n\tS,\n\tBS = S\n>(mo: {\n\tname?: string\n\tstate: S\n\treducers?: R\n\tbaseReducer?: BR\n\teffects?: E\n}) => {\n\tname?: string\n\tstate: S\n\treducers: R\n\tbaseReducer: BR\n\teffects: E\n} = () => (mo): any => mo\n\nexport default {\n\tinit,\n\tcreateModel,\n}\n\nexport * from './types'\n"]},"metadata":{},"sourceType":"module"}