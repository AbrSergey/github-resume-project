{"ast":null,"code":"import { getAccessToken } from '../services/backend';\nexport default {\n  state: {\n    loading: true,\n    error: null\n  },\n  reducers: {\n    fetching: (state, payload) => ({\n      loading: true,\n      error: null\n    }),\n    succeed: (state, payload) => ({ ...state,\n      loading: false\n    }),\n    failed: (state, error) => ({ ...state,\n      loading: false,\n      error: JSON.stringify(error)\n    })\n  },\n  effects: {\n    async get(payload, rootState) {\n      try {\n        this.fetching();\n        await getAccessToken(payload);\n        this.succeed();\n      } catch (err) {\n        this.failed(err);\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["/home/sergey/Documents/own_project/MVP/mvp-crash-course/src/models/authorize.js"],"names":["getAccessToken","state","loading","error","reducers","fetching","payload","succeed","failed","JSON","stringify","effects","get","rootState","err"],"mappings":"AAAA,SAASA,cAAT,QAA+B,qBAA/B;AAEA,eAAe;AACbC,EAAAA,KAAK,EAAE;AACLC,IAAAA,OAAO,EAAE,IADJ;AAELC,IAAAA,KAAK,EAAE;AAFF,GADM;AAMbC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE,CAACJ,KAAD,EAAQK,OAAR,MAAqB;AAC7BJ,MAAAA,OAAO,EAAE,IADoB;AAE7BC,MAAAA,KAAK,EAAE;AAFsB,KAArB,CADF;AAKRI,IAAAA,OAAO,EAAE,CAACN,KAAD,EAAQK,OAAR,MAAqB,EAC5B,GAAGL,KADyB;AAE5BC,MAAAA,OAAO,EAAE;AAFmB,KAArB,CALD;AASRM,IAAAA,MAAM,EAAE,CAACP,KAAD,EAAQE,KAAR,MAAmB,EACzB,GAAGF,KADsB;AAEzBC,MAAAA,OAAO,EAAE,KAFgB;AAGzBC,MAAAA,KAAK,EAAEM,IAAI,CAACC,SAAL,CAAeP,KAAf;AAHkB,KAAnB;AATA,GANG;AAsBbQ,EAAAA,OAAO,EAAE;AACP,UAAMC,GAAN,CAAUN,OAAV,EAAmBO,SAAnB,EAA8B;AAC5B,UAAI;AACF,aAAKR,QAAL;AACA,cAAML,cAAc,CAACM,OAAD,CAApB;AACA,aAAKC,OAAL;AACD,OAJD,CAIE,OAAMO,GAAN,EAAW;AACX,aAAKN,MAAL,CAAYM,GAAZ;AACD;AACF;;AATM;AAtBI,CAAf","sourcesContent":["import { getAccessToken } from '../services/backend';\n\nexport default {\n  state: {\n    loading: true,\n    error: null\n  },\n\n  reducers: {\n    fetching: (state, payload) => ({\n      loading: true,\n      error: null \n    }),\n    succeed: (state, payload) => ({\n      ...state,\n      loading: false\n    }), \n    failed: (state, error) => ({\n      ...state,\n      loading: false,\n      error: JSON.stringify(error)\n    }) \n  },\n\n  effects: {\n    async get(payload, rootState) {\n      try {\n        this.fetching();\n        await getAccessToken(payload);\n        this.succeed();\n      } catch(err) {\n        this.failed(err);\n      }\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}